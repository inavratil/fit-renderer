//TessEval
layout(triangles, equal_spacing, cw) in;
in vec4 tcPosition[];
in vec2 tcCoord[];

uniform mat4 in_ModelViewMatrix;

uniform vec2 near_far; // near and far plane for cm-cams
uniform float ZOOM;
/*
const vec2 near_far = vec2(0.1, 1000.0);
const float ZOOM = 1.0;
*/

out vec2 teCoord;
out vec4 tePosition;

void main()
{
    //vertex position from tessellator
    vec4 p0 = gl_TessCoord.x * tcPosition[0];
    vec4 p1 = gl_TessCoord.y * tcPosition[1];
    vec4 p2 = gl_TessCoord.z * tcPosition[2];
    tePosition = p0 + p1 + p2;
    //texture coordinate
    vec2 t0 = gl_TessCoord.x * tcCoord[0];
    vec2 t1 = gl_TessCoord.y * tcCoord[1];
    vec2 t2 = gl_TessCoord.z * tcCoord[2];
    teCoord = t0 + t1 + t2;
    
    //paraboloid projection
    vec4 vertexEyeSpace = in_ModelViewMatrix * tePosition;
#ifdef PARABOLA_CUT
    gl_ClipDistance[0] = -0.75*vertexEyeSpace.x - vertexEyeSpace.z;
#else
    gl_ClipDistance[0] = -vertexEyeSpace.z;
#endif

    float Length = length( vertexEyeSpace.xyz );
    vertexEyeSpace.z *= -1.0;
    vertexEyeSpace.xyz = normalize( vertexEyeSpace.xyz );

    vertexEyeSpace.z += 1.0;
    vertexEyeSpace.x /= vertexEyeSpace.z;
    vertexEyeSpace.y /= vertexEyeSpace.z;

#ifdef PARABOLA_CUT
    //FIXME: transform from [-2 .. 1/2] to [-1 .. 1]
    vertexEyeSpace.x = (vertexEyeSpace.x + 2.0) * 0.8 /* 2 / 5/2 == 4/5 */ - 1.0;
#endif

    vertexEyeSpace.xy /= ZOOM;   //zoom-in

    vertexEyeSpace.z = (Length - near_far.x)/(near_far.y - near_far.x);
    vertexEyeSpace.w = 1.0;

    tePosition = vertexEyeSpace;

    gl_Position = vertexEyeSpace;
}
