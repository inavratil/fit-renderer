//TessEval

layout(triangles, equal_spacing, cw) in;
in vec3 tcPosition[];
//in vec3 tcNormal[];
out vec3 tePosition;
out vec3 tePatchDistance;

layout(std140) uniform Matrices{
  mat4 in_ProjectionMatrix;
};
uniform mat4 in_ModelViewMatrix;

void main()
{
    vec3 t1 = gl_TessCoord;
    vec3 t2 = gl_TessCoord * gl_TessCoord;
    vec3 t3 = gl_TessCoord * gl_TessCoord * gl_TessCoord;
    
    float f0 = gl_TessCoord.x; //length(normalize(-t3 + 3*t2 - 3*t1 + 1.0));
    float f1 = gl_TessCoord.y; //length(normalize(3*t3 - 6*t2 + 4));
    float f2 = gl_TessCoord.z; //length(normalize(-3*t3 + 3*t2 + 3*4 + 1.0));
    
    vec3 p0 = tcPosition[0];
    vec3 p1 = tcPosition[1];
    vec3 p2 = tcPosition[2];
    
    tePosition = f0*p0 + f1*p1 + f2*p2;

    /*
    vec3 p0 = gl_TessCoord.x * tcPosition[0];
    vec3 p1 = gl_TessCoord.y * tcPosition[1];
    vec3 p2 = gl_TessCoord.z * tcPosition[2];
    */
    
    tePatchDistance = gl_TessCoord;
    //tePosition = (p0 + p1 + p2);
    
    gl_Position = in_ProjectionMatrix * in_ModelViewMatrix * vec4(tePosition, 1);
}
